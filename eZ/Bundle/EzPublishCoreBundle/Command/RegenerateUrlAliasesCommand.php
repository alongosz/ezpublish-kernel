<?php

/**
 * @copyright Copyright (C) eZ Systems AS. All rights reserved.
 * @license For full copyright and license information view LICENSE file distributed with this source code.
 */
namespace eZ\Bundle\EzPublishCoreBundle\Command;

use Exception;
use eZ\Publish\API\Repository\ContentService;
use eZ\Publish\API\Repository\LocationService;
use eZ\Publish\API\Repository\PermissionResolver;
use eZ\Publish\API\Repository\URLAliasService;
use eZ\Publish\API\Repository\UserService;
use eZ\Publish\API\Repository\Values\Content\Location;
use eZ\Publish\Core\Base\Exceptions\NotFoundException;
use Psr\Log\LoggerInterface;
use Psr\Log\NullLogger;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * The ezplatform:urls:regenerate-aliases Symfony command implementation.
 * Recreates system URL aliases for all existing Locations and cleanups corrupted URL alias nodes.
 */
class RegenerateUrlAliasesCommand extends Command
{
    const DEFAULT_ITERATION_COUNT = 1000;
    const DEFAULT_REPOSITORY_USER = 'admin';

    /**
     * @var \eZ\Publish\API\Repository\PermissionResolver
     */
    private $permissionResolver;

    /**
     * @var \eZ\Publish\API\Repository\UserService
     */
    private $userService;

    /**
     * @var \eZ\Publish\API\Repository\LocationService
     */
    private $locationService;

    /**
     * @var \eZ\Publish\API\Repository\ContentService
     */
    private $contentService;

    /**
     * @var \eZ\Publish\API\Repository\URLAliasService
     */
    private $urlAliasService;

    /**
     * @var \Psr\Log\LoggerInterface
     */
    private $logger;

    /**
     * @param \eZ\Publish\API\Repository\PermissionResolver $permissionResolver
     * @param \eZ\Publish\API\Repository\UserService $userService
     * @param \eZ\Publish\API\Repository\LocationService $locationService
     * @param \eZ\Publish\API\Repository\ContentService $contentService
     * @param \eZ\Publish\API\Repository\URLAliasService $urlAliasService
     * @param \Psr\Log\LoggerInterface $logger
     */
    public function __construct(
        PermissionResolver $permissionResolver,
        UserService $userService,
        LocationService $locationService,
        ContentService $contentService,
        URLAliasService $urlAliasService,
        LoggerInterface $logger = null
    ) {
        parent::__construct();

        $this->permissionResolver = $permissionResolver;
        $this->userService = $userService;
        $this->locationService = $locationService;
        $this->contentService = $contentService;
        $this->urlAliasService = $urlAliasService;
        $this->logger = null !== $logger ? $logger : new NullLogger();
    }

    /**
     * {@inheritdoc}
     */
    protected function configure()
    {
        $this
            ->setName('ezplatform:urls:regenerate-aliases')
            ->setDescription(
                'Regenerates Location URL aliases (autogenerated) and migrates custom Location ' .
                'and global URL aliases with Legacy Storage Engine'
            )
            ->addOption(
                'iteration-count',
                'c',
                InputOption::VALUE_OPTIONAL,
                'Number of Locations fetched into memory and processed at once',
                self::DEFAULT_ITERATION_COUNT
            )
            ->addOption(
                'user',
                'u',
                InputOption::VALUE_OPTIONAL,
                'eZ Platform user used when running this command',
                self::DEFAULT_REPOSITORY_USER
            )
            ->setHelp(
                <<<EOT
The command <info>%command.name%</info> regenerates URL aliases for Locations and cleanups
corrupted URL aliases (pointing to non-existent Locations).
Existing aliases are archived (will redirect to the new ones).

<error>During the script execution the database should not be modified.</error>

Since this script can potentially run for a very long time, to avoid memory exhaustion run it in
production environment using <info>--env=prod</info> switch.

EOT
            );
    }

    /**
     * @param \Symfony\Component\Console\Input\InputInterface $input
     * @param \Symfony\Component\Console\Output\OutputInterface $output
     *
     * @throws \eZ\Publish\API\Repository\Exceptions\NotFoundException
     */
    protected function initialize(InputInterface $input, OutputInterface $output)
    {
        $this->permissionResolver->setCurrentUserReference(
            $this->userService->loadUserByLogin($input->getOption('user'))
        );
    }

    /**
     * Regenerate URL aliases.
     *
     * {@inheritdoc}
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $iterationCount = (int)$input->getOption('iteration-count');

        $locationsCount = $this->locationService->countAllLocations();
        $output->writeln(
            sprintf(
                '<info>Found %d Locations. Regenerating System URL aliases...</info>',
                $locationsCount
            )
        );

        $progressBar = $this->getProgressBar($locationsCount, $output);
        $progressBar->start();

        for ($offset = 0; $offset <= $locationsCount; $offset += $iterationCount) {
            $locations = $this->locationService->loadAllLocations($iterationCount, $offset);
            $this->processLocations($locations, $progressBar, $output);
            // force garbage collection
            gc_collect_cycles();
        }
        $progressBar->finish();
        $output->writeln('');

        $output->writeln('<info>Cleaning up corrupted URL aliases...</info>');
        /*$corruptedAliasesCount = $this->urlAliasService->deleteCorruptedUrlAliases();
        $output->writeln("<info>Done. Deleted {$corruptedAliasesCount} entries.</info>");*/
    }

    /**
     * Return configured progress bar helper.
     *
     * @param int $maxSteps
     * @param \Symfony\Component\Console\Output\OutputInterface $output
     *
     * @return \Symfony\Component\Console\Helper\ProgressBar
     */
    protected function getProgressBar($maxSteps, OutputInterface $output): ProgressBar
    {
        $progressBar = new ProgressBar($output, $maxSteps);
        $progressBar->setFormat(
            ' %current%/%max% [%bar%] %percent:3s%% %elapsed:6s%/%estimated:-6s% %memory:6s%'
        );

        return $progressBar;
    }

    /**
     * Process single results page of fetched Locations.
     *
     * @param \eZ\Publish\API\Repository\Values\Content\Location[] $locations
     * @param \Symfony\Component\Console\Helper\ProgressBar $progressBar
     * @param \Symfony\Component\Console\Output\OutputInterface $output
     */
    private function processLocations(
        array $locations,
        ProgressBar $progressBar,
        OutputInterface $output
    ) {
        $contentIds = array_map(
            function (Location $location) {
                return $location->contentId;
            },
            $locations
        );
        $contents = $this->contentService->loadContentsByIds($contentIds);
        foreach ($locations as $location) {
            try {
                if (!isset($contents[$location->contentId])) {
                    throw new NotFoundException(
                        sprintf(
                            'Content %d for Location %d not found (or unable to load)',
                            $location->contentId,
                            $location->id
                        ),
                        $location->contentId
                    );
                }
                $this->urlAliasService->refreshSystemUrlAliasesForLocation($location, $content);
            } catch (Exception $e) {
                $this->handleLocationException($e, $location, $output);
            } finally {
                $progressBar->advance();
            }
        }
    }

    /**
     * Decide what to do with Location Exception based on output verbosity level.

     * @param \Exception $e
     * @param \eZ\Publish\API\Repository\Values\Content\Location $location
     * @param \Symfony\Component\Console\Output\OutputInterface $output
     */
    private function handleLocationException(
        Exception $e,
        Location $location,
        OutputInterface $output
    ) {
        $contentInfo = $location->getContentInfo();
        $msg = sprintf(
            '<comment>Failed processing location %d - [%d] %s (%s: %s)</comment>',
            $location->id,
            $contentInfo->id,
            $contentInfo->name,
            get_class($e),
            $e->getMessage()
        );
        // handle running progress bar
        /*if ($output->isDecorated()) {
            $output->write("\n");
        }
        $this->logger->warning($msg);*/
    }
}
