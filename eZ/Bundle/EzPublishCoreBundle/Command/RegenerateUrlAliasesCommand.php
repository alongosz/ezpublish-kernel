<?php

/**
 * @copyright Copyright (C) eZ Systems AS. All rights reserved.
 * @license For full copyright and license information view LICENSE file distributed with this source code.
 */
namespace eZ\Bundle\EzPublishCoreBundle\Command;

use Exception;
use eZ\Publish\API\Repository\LocationService;
use eZ\Publish\API\Repository\PermissionResolver;
use eZ\Publish\API\Repository\URLAliasService;
use eZ\Publish\API\Repository\UserService;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * The ezplatform:urls:regenerate-aliases Symfony command implementation.
 * Recreates system URL aliases for all existing Locations and cleanups corrupted URL alias nodes.
 */
class RegenerateUrlAliasesCommand extends Command
{
    /**
     * @var \eZ\Publish\API\Repository\PermissionResolver
     */
    private $permissionResolver;

    /**
     * @var \eZ\Publish\API\Repository\UserService
     */
    private $userService;

    /**
     * @var \eZ\Publish\API\Repository\LocationService
     */
    private $locationService;

    /**
     * @var \eZ\Publish\API\Repository\URLAliasService
     */
    private $urlAliasService;

    public function __construct(
        PermissionResolver $permissionResolver,
        UserService $userService,
        LocationService $locationService,
        URLAliasService $urlAliasService
    ) {
        parent::__construct(null);

        $this->permissionResolver = $permissionResolver;
        $this->userService = $userService;
        $this->locationService = $locationService;
        $this->urlAliasService = $urlAliasService;
    }

    /**
     * {@inheritdoc}
     */
    protected function configure()
    {
        $this
            ->setName('ezplatform:urls:regenerate-aliases')
            ->setDescription(
                'Regenerates Location URL aliases (autogenerated) and migrates custom Location ' .
                'and global URL aliases with Legacy Storage Engine'
            )
            ->addArgument(
                'bulk-count',
                InputArgument::OPTIONAL,
                'Number of Locations processed in a single database transaction',
                50
            )
            ->addOption(
                'user',
                'u',
                InputOption::VALUE_OPTIONAL,
                'eZ Platform user used when running this command',
                'admin'
            )
            ->setHelp(
                <<<EOT
The command <info>%command.name%</info> regenerates URL aliases for Locations and cleanups
corrupted URL aliases (pointing to non-existent Locations).
Existing aliases are archived (will redirect to the new ones).

<error>During the script execution the database should not be modified.</error>

Since this script can potentially run for a very long time, to avoid memory exhaustion run it in
production environment using <info>--env=prod</info> switch.

EOT
            )
        ;
    }

    /**
     * @param \Symfony\Component\Console\Input\InputInterface $input
     * @param \Symfony\Component\Console\Output\OutputInterface $output
     *
     * @throws \eZ\Publish\API\Repository\Exceptions\NotFoundException
     */
    protected function initialize(InputInterface $input, OutputInterface $output)
    {
        $this->permissionResolver->setCurrentUserReference(
            $this->userService->loadUserByLogin($input->getOption('user'))
        );
    }

    /**
     * {@inheritdoc}
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $output->writeln('<info>Getting all nodes data to regenerate system URL aliases...</info>');
        $locations = $this->locationService->loadAllLocations(-1, 0);
        $progressBar = $this->getProgressBar(count($locations), $output);
        $output->writeln(
            sprintf('<info>Found %d nodes. Processing...</info>', $progressBar->getMaxSteps())
        );
        $progressBar->start();
        foreach ($locations as $location) {
            try {
                $this->urlAliasService->refreshSystemUrlAliasesForLocation($location);
                $progressBar->advance();
            } catch (Exception $e) {
                $output->writeln(
                    sprintf(
                        '<error>An error occurred for the Location %d: %s: %s</error>',
                        $location->id,
                        get_class($e),
                        $e->getMessage()
                    )
                );
            }
        }
        $progressBar->finish();

        $output->writeln('');
        $output->writeln('<info>Cleaning up corrupted URL aliases...</info>');
        $corruptedAliasesCount = $this->urlAliasService->deleteCorruptedUrlAliases();
        $output->writeln("<info>Done. Removed {$corruptedAliasesCount} entries.</info>");
    }

    /**
     * Return configured progress bar helper.
     *
     * @param int $maxSteps
     *
     * @param \Symfony\Component\Console\Output\OutputInterface $output
     *
     * @return \Symfony\Component\Console\Helper\ProgressBar
     */
    protected function getProgressBar($maxSteps, OutputInterface $output)
    {
        $progressBar = new ProgressBar($output, $maxSteps);
        $progressBar->setFormat(
            ' %current%/%max% [%bar%] %percent:3s%% %elapsed:6s%/%estimated:-6s% %memory:6s%'
        );

        return $progressBar;
    }
}
